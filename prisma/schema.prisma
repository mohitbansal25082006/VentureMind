// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  reports       Report[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Report {
  id                    String   @id @default(cuid())
  userId                String
  title                 String
  description           String   @db.Text
  industry              String
  targetMarket          String
  region                String
  
  // Market Analysis
  tamSize               BigInt?
  samSize               BigInt?
  somSize               BigInt?
  marketTrends          Json?
  
  // Competitor Analysis
  competitors           Json?
  competitorAnalysis    Json?
  
  // SWOT Analysis
  strengths             Json?
  weaknesses            Json?
  opportunities         Json?
  threats               Json?
  
  // Risk Analysis
  risks                 Json?
  riskMatrix            Json?
  
  // Business Model
  revenueStreams        Json?
  monetizationStrategy  Json?
  
  // Tech Analysis
  techStack             Json?
  techComplexity        String?
  teamEstimation        Json?
  mvpTimeline           String?
  budgetEstimate        String?
  
  // Investment Analysis
  investmentScore       Int?
  improvementTips       Json?
  
  // Analysis Data
  analysisData          Json?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reports")
}